/*****************************************************************//**
 * \file   Model.h
 * \brief  モデルクラス
 * 
 * \author Hiroto Kuge
 * \date   October 2022
 *********************************************************************/

#pragma once

//-----------------------------------------------------------------------------
// Includes.
//-----------------------------------------------------------------------------
#include "MDLoader.h"
#include "Mesh.h"
#include "Material.h"

//-----------------------------------------------------------------------------
// Forword Decolations
//-----------------------------------------------------------------------------
class PipelineState;
class RootSignature;

//-----------------------------------------------------------------------------
// Model Class
//-----------------------------------------------------------------------------
class Model{
	//-----------------------------------------------------------------------------
	// list of friends classes and methods.
	//-----------------------------------------------------------------------------	
	//!{
			/* Nothing */
	//!} 
public:
	//=============================================================================
	// enum
	//=============================================================================
	enum PIPELINE_STATE_TYPE{
		BASIC = 0,	// 基本
		MAX			// 定義数
	};


	//-----------------------------------------------------------------------------
	// public variables.
	//-----------------------------------------------------------------------------
	//!{
			/* Nothing */
	//!} 
	//-----------------------------------------------------------------------------
	// public methods.
	//-----------------------------------------------------------------------------
	//!{
	 
	/*****************************************************************//**
	 * \brief コンストラクタ
	 *********************************************************************/
	Model();

	/*****************************************************************//**
	 * \brief デストラクタ
	 *********************************************************************/
	~Model();

	/*****************************************************************//**
	 * \brief 初期化処理
	 * 
	 * \param	pDevice	デバイス 
	 * \param	pPool	ディスクリプタプール 
	 * \param	mdPath	モデルデータファイルパス
	 * \param	mtPath	マテリアルデータファイルパス
	 * \return	true	初期化に成功
	 * \return	false	初期化に失敗
	 *********************************************************************/
	bool Init(
		ID3D12Device* pDevice, 
		DescriptorPool* pPool,
		const wchar_t* mdPath, 
		const wchar_t* mtPath);

	/*****************************************************************//**
	 * \brief 描画処理
	 * 
	 * \param pCmdList		コマンドリスト
	 * \param pHeapRes		ディスクリプタプール(CBV,SRV,UAV)
	 * \param nowFrameCnt	現在のフレームバッファ番号
	 *********************************************************************/
	void Draw(
		ID3D12GraphicsCommandList* pCmdList, 
		DescriptorPool* pPoolRes,
		uint32_t nowFrameCnt
		);

	/*****************************************************************//**
	 * \brief 終了処理
	 *********************************************************************/
	void Term();

	//!} 
private:	
	//-----------------------------------------------------------------------------
	// private variables.
	//-----------------------------------------------------------------------------
	//!{
	
	std::vector<Mesh*>              m_pMeshes;					    // メッシュ
	std::vector<ConstantBuffer*>    m_Transform;				    // 変換行列
	Material                        m_Material;					    // マテリアル
	std::wstring					m_directoryPath;				// ディレクトリパス

	std::unique_ptr<RootSignature>	m_pRootSignatures[PIPELINE_STATE_TYPE::MAX] = { nullptr };	// ルートシグネチャ
	std::unique_ptr<PipelineState>	m_pPipelineStates[PIPELINE_STATE_TYPE::MAX] = { nullptr };	// パイプラインステート

	static MDLoader	m_loader; // リソースローダー
	
	//!}
	//-----------------------------------------------------------------------------
	// private methods.
	//----------------------------------------------------------------------------- 
	//!{
	 
	Model(const Model&) = delete;			 // アクセス禁止
	void operator = (const Model&) = delete; //	アクセス禁止

	//!} 
};

