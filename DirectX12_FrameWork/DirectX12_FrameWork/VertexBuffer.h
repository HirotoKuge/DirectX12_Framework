/*****************************************************************//**
 * \file   VertexBuffer.h
 * \brief  頂点バッファクラス
 * 
 * \author Hiroto Kuge
 * \date   October 2022
 *********************************************************************/
#pragma once

//-----------------------------------------------------------------------------
// Includes.
//-----------------------------------------------------------------------------
#include <d3d12.h>
#include "ComPtr.h"


class VertexBuffer{
	//-----------------------------------------------------------------------------
	// list of friend classes and methods
	//-----------------------------------------------------------------------------
	//!{
			/* Nothing */
	//!} 
public:
	//-----------------------------------------------------------------------------
	// public variables.
	//-----------------------------------------------------------------------------
	//!{
			/* Nothing */
	//!} 
	//-----------------------------------------------------------------------------
	// public methods.
	//-----------------------------------------------------------------------------
	//!{
	
	/*****************************************************************//**
	 * \brief コンストラクタ
	 *********************************************************************/
	VertexBuffer();

	/*****************************************************************//**
	 * \brief デストラクタ
	 *********************************************************************/
	~VertexBuffer();

	/*****************************************************************//**
	 * \brief 初期化処理
	 * \param pDevice	デバイス
	 * \param size		頂点バッファサイズ
	 * \param stride	1頂点当たりのサイズ
	 * \param pInitData	初期化データ
	 * \return true		初期化成功
	 * \return false	初期化失敗
	 *********************************************************************/
	bool Init(ID3D12Device* pDevice, size_t size, size_t stride, const void* pInitData = nullptr);
	
	/*****************************************************************//**
	 * \brief 初期化処理
	 * \param pDevice	デバイス
	 * \param size		頂点バッファサイズ
	 * \param pInitData	1頂点当たりのサイズ
	 * \return true		初期化成功
	 * \return false	初期化失敗 
	 *********************************************************************/
	template<typename T>
	bool Init(ID3D12Device* pDevice, size_t size, const T* pInitData = nullptr)
	{ return Init(pDevice, size, sizeof(T), pInitData); }

	/*****************************************************************//**
	 * \brief 終了処理
	 *********************************************************************/
	void Term();

	/*****************************************************************//**
	 * \brief	メモリマッピング
	 * \return	メモリマッピング済みのメモリ
	 *********************************************************************/
	void* Map();

	/*****************************************************************//**
	 * \brief	メモリマッピング
	 * \return	メモリマッピング済みのメモリ
	 *********************************************************************/
	template<typename T>
	T* Map()const
	{ return reinterpret_cast<T*>(Map()); }

	/*****************************************************************//**
	 * \brief	メモリマッピングの解除
	 *********************************************************************/
	void Unmap();

	/*****************************************************************//**
	 * \brief	頂点バッファビューを取得
	 * \return	頂点バッファビュー
	 *********************************************************************/
	D3D12_VERTEX_BUFFER_VIEW GetView() const;
	
	//!} 

private:
	//-----------------------------------------------------------------------------
	// private variables.
	//-----------------------------------------------------------------------------
	//!{
			
	ComPtr<ID3D12Resource>      m_pVB;	// 頂点バッファ
	D3D12_VERTEX_BUFFER_VIEW    m_view;	// 頂点バッファビュー

	//!} 
	//-----------------------------------------------------------------------------
	// private methods.
	//-----------------------------------------------------------------------------
	//!{
	
	VertexBuffer(const VertexBuffer&) = delete;     // アクセス禁止
	void operator = (const VertexBuffer&) = delete;	// アクセス禁止

	//!} 
};

