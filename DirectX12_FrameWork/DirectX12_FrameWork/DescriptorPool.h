/*****************************************************************//**
 * \file   DescriptorPool.h
 * 
 * \author Hiroto Kuge
 * \date   October 2022
 *********************************************************************/
#pragma once

//---------------------------------------------
// includes.
//---------------------------------------------
#include <d3d12.h>
#include <atomic>
#include "ComPtr.h"
#include "Pool.h"


/*****************************************************************//**
 * \brief ディスクリプタハンドルクラス
 *********************************************************************/
class DescriptorHandle {
public:	
    D3D12_CPU_DESCRIPTOR_HANDLE HandleCPU;  //!< CPUディスクリプタハンドル
    D3D12_GPU_DESCRIPTOR_HANDLE HandleGPU;  //!< GPUディスクリプタハンドル

    bool HasCPU() const
    {  return HandleCPU.ptr != 0;}

    bool HasGPU() const
    { return HandleGPU.ptr != 0; }
};

/*****************************************************************//**
 * \brief ディスクリプタプールクラス
 *********************************************************************/
class DescriptorPool{
   //---------------------------------------------------------
   // list of friend class and methods
   //---------------------------------------------------------
   //!{
            /* Nothing. */
   //!}

public:
    //--------------------------------------------------------
    // public variables.
    //--------------------------------------------------------
    //!{
            /* Nothing. */
    //!}
    //--------------------------------------------------------
    // public methods.
    //--------------------------------------------------------
    //!{ 
    
    /*****************************************************************//**
     * \brief ディスクリプタプールの生成
     *  
     * \param pDevice：デバイスへのポインタ
     * \param pDesc：ディスクリプタヒープの構成設定
     * \param ppPool：ディスクリプタプールの格納先
     * \return true：生成に成功 
     * \return false：生成に失敗
     *********************************************************************/
    static bool Create(
        ID3D12Device* pDevice,
        const D3D12_DESCRIPTOR_HEAP_DESC* pDesc,
        DescriptorPool** ppPool);
    
    
    /*****************************************************************//**
     * \brief 参照カウントを増やす
     *********************************************************************/
    void AddRef();
    
    /*****************************************************************//**
     * \brief 開放処理
     *********************************************************************/
    void Release();
    
    /*****************************************************************//**
     * \brief 参照カウントの取得
     *  
     * \return 参照カウント
     *********************************************************************/
    uint32_t GetRefCount();


    /*****************************************************************//**
     * \brief ディスクリプタハンドルを割り当てる
     *  
     * \return 割り当てられたディスクリプタハンドルへのポインタ
     *********************************************************************/
    DescriptorHandle* AllocHandle();

    /*****************************************************************//**
     * \brief ディスクリプタハンドルの開放
     *  
     * \param 開放するハンドルへのポインタ
     *********************************************************************/
    void FreeHandle(DescriptorHandle*&);


    /*****************************************************************//**
     * \brief 使用可能なハンドル数を取得
     *  
     * \return 使用可能なハンドルの数
     *********************************************************************/
    uint32_t GetAvailableHandleCount()const;

    /*****************************************************************//**
     * \brief 割り当て済みのハンドル数の取得
     *  
     * \return　割り当て済みのハンドル数 
     *********************************************************************/
    uint32_t GetAllocatedHandleCount()const;

    /*****************************************************************//**
     * \brief ハンドルの総数を取得
     *  
     * \return ハンドルの総数
     *********************************************************************/
    uint32_t GetTotalHandleCount()const;

    /*****************************************************************//**
     * \brief ディスクリプタヒープを取得
     *  
     * \return ディスクリプタヒープ
     *********************************************************************/
    ID3D12DescriptorHeap* const GetHeap() const;

    //!} 

private:
    //--------------------------------------------------------
    // private valiables.
    //--------------------------------------------------------
    //!{
     
    std::atomic<uint32_t>           m_refCount;         // 参照カウント
    Pool<DescriptorHandle>          m_pool;             // ディスクリプタハンドルのプール
    ComPtr<ID3D12DescriptorHeap>    m_pHeap;            // ディスクリプタヒープ
    uint32_t                        m_descriptorSize;   // ディスクリプタサイズ(環境によって変わる)
    
    //!}
    //--------------------------------------------------------
    // private methods.
    //--------------------------------------------------------
    //!{ 
    
    /*****************************************************************//**
     * \brief コンストラクタ(秘匿)：new以外の生成の禁止
     *********************************************************************/
    DescriptorPool();
    
    /*****************************************************************//**
     * \brief デストラクタ
     *********************************************************************/
    ~DescriptorPool();
    
    DescriptorPool(const DescriptorPool&) = delete;   // アクセス禁止.
    void operator = (const DescriptorPool&) = delete; // アクセス禁止
    //!} 
};

