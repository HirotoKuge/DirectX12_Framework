/*****************************************************************//**
 * \file   GraphicsEngine.h
 * \brief  DirectX12の描画エンジン
 * 
 * \author Hiroto Kuge
 * \date   October 2022
 *********************************************************************/
#pragma once

//-----------------------------------------------------------------------------
// Includes.
//-----------------------------------------------------------------------------
#include <d3d12.h>
#include <d3dx12.h>
#include <DirectXTex.h>
#include <dxgi.h>
#include <dxgi1_6.h>
#include "ComPtr.h"
#include "DescriptorPool.h"
#include "ColorTarget.h"
#include "DepthTarget.h"
#include "CommandList.h"
#include "Fence.h"


//-----------------------------------------------------------------------------
// Linker.
//-----------------------------------------------------------------------------
#pragma comment( lib, "d3d12.lib") 
#pragma comment( lib, "dxgi.lib") 
#pragma comment( lib, "dxgi.lib" )
#pragma comment( lib, "d3dcompiler.lib" )



//DirectX12の描画基盤となる機能をまとめたクラス
//シングルトンパターンの実装
//→各種バッファなどからデバイスのインターフェースにアクセスしたい場合が多いため
//引数でポインタを渡す実装では仮にGraphicsEngineクラスが破棄されたときにオブジェクトが検知できないため
//→オブザーバーパターンを用いれば可能ではあるが参照したい箇所が多いのでシングルトンのほうが効率的だと判断
class GraphicsEngine {
	//-----------------------------------------------------------------------------
	// list of friend classes and methods.
	//-----------------------------------------------------------------------------
	//!{
			/* Nothing */
	//!} 
public:

	//-----------------------------------------------------------------------------
	// PoolType enum
	//-----------------------------------------------------------------------------
	enum POOL_TYPE {
		POOL_TYPE_RES	= 0,     // CBV / SRV / UAV
		POOL_TYPE_SMP	= 1,     // Sampler
		POOL_TYPE_RTV	= 2,     // RTV
		POOL_TYPE_DSV	= 3,     // DSV
		POOL_COUNT		= 4,
	};

	//-----------------------------------------------------------------------------
	// public variables.
	//-----------------------------------------------------------------------------
	//!{
			/* Nothing */
	//!}
	//-----------------------------------------------------------------------------
	// public methods.
	//-----------------------------------------------------------------------------
	//!{
	
	/*****************************************************************//**
	 * \brief	インスタンス取得
	 * \return	インスタンスアドレス
	 *********************************************************************/
	static GraphicsEngine* GetInstance() {
		static GraphicsEngine pInstance;
		return &pInstance;
	}

	/*****************************************************************//**
	 * \brief 初期化処理
	 * \param hwnd			ウィンドウハンドル
	 * \param windowWidth	ウィンドウ幅
	 * \param windowHeight	ウィンドウ高さ
	 * \return true			初期化失敗
	 * \return false		初期化成功
	 *********************************************************************/
	bool Init(HWND hwnd, UINT windowWidth, UINT windowHeight);
	
	/*****************************************************************//**
	 * \brief 終了処理
	 *********************************************************************/
	void Term();

	/*****************************************************************//**
	 * \brief 描画前の処理
	 *********************************************************************/
	void BeginRender();

	/*****************************************************************//**
	 * \brief 描画最後の処理
	 *********************************************************************/
	void EndRender();

	/*****************************************************************//**
	 * \brief	デバイスを取得
	 * \return	デバイス
	 *********************************************************************/
	ID3D12Device* GetDevice()const;

	/*****************************************************************//**
	 * \brief	現在のフレーム番号を取得
	 * \return	現在のフレーム番号
	 *********************************************************************/
	uint32_t GetCurrentFrameIndex()const;

	/*****************************************************************//**
	 * \brief	コマンドリストを取得
	 * \return	コマンドリスト
	 *********************************************************************/
	ID3D12GraphicsCommandList* GetCommandList()const;

	/*****************************************************************//**
	 * \brief ディスクリプタプールを取得
	 * \param poolType	取得するディスクリプタプールのタイプ
	 * \return ディスクリプタプール
	 *********************************************************************/
	DescriptorPool* GetDiscriptaPool(POOL_TYPE poolType)const;

	//!}
private:

	//-----------------------------------------------------------------------------
	// private variables.
	//-----------------------------------------------------------------------------
	//!{
	
	static const uint32_t FrameCount = 2;   // フレームバッファ数

	HINSTANCE   m_hInst;        // インスタンスハンドル
	HWND        m_hWnd;         // ウィンドウハンドル
	uint32_t    m_Width;        // ウィンドウの横幅
	uint32_t    m_Height;       // ウィンドウの縦幅

	ComPtr<ID3D12Device>        m_pDevice;                  // デバイス
	ComPtr<ID3D12CommandQueue>  m_pQueue;                   // コマンドキュー
	ComPtr<IDXGISwapChain3>     m_pSwapChain;               // スワップチェイン
	ColorTarget                 m_ColorTarget[FrameCount];  // カラーターゲット
	DepthTarget                 m_DepthTarget;              // 深度ターゲット
	DescriptorPool*				m_pPool[POOL_COUNT];		// ディスクリプタプール
	CommandList                 m_CommandList;              // コマンドリスト
	Fence                       m_Fence;                    // フェンス
	D3D12_VIEWPORT              m_Viewport;                 // ビューポート
	D3D12_RECT                  m_Scissor;                  // シザー矩形


	uint32_t                    m_frameIndex;               // フレーム番号
	D3D_FEATURE_LEVEL			m_featureLevel;				// 実行環境のデバイスの対応レベル
	ID3D12GraphicsCommandList*	m_pNowCmdList;				// 現在使用中のコマンドリストへのポインタ

	//!} 
	//-----------------------------------------------------------------------------
	// private methods.
	//-----------------------------------------------------------------------------
	//!{
	GraphicsEngine();
	
	//!} 
};