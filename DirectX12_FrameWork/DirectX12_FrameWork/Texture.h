/*****************************************************************//**
 * \file   Texture.h
 * \brief  テクスチャを扱うクラス
 * 
 * \author Hiroto Kuge
 * \date   October 2022
 *********************************************************************/

#pragma once

//-----------------------------------------------------------------------------
// Includes. 
//-----------------------------------------------------------------------------
#include <d3dx12.h>
#include "ComPtr.h"

//-----------------------------------------------------------------------------
// Forword Declarations.
//-----------------------------------------------------------------------------
class DescriptorHandle;
class DescriptorPool;

//-----------------------------------------------------------------------------
// Texture Class.
//-----------------------------------------------------------------------------
class Texture{
	//-----------------------------------------------------------------------------
	// list of friend classes and methods.
	//-----------------------------------------------------------------------------
	//!{
			/* Nothing */
	//!} 
public:
	//-----------------------------------------------------------------------------
	// public variables.
	//-----------------------------------------------------------------------------
	//!{
			/* Nothing */
	//!}
	//-----------------------------------------------------------------------------
	// public methods.
	//-----------------------------------------------------------------------------
	//!{
	
	/*****************************************************************//**
	 * \brief コンストラクタ
	 *********************************************************************/
	Texture();

	/*****************************************************************//**
	 * \brief デストラクタ
	 *********************************************************************/
	~Texture();
	
	/*****************************************************************//**
	 * \brief 初期化処理 ファイルから読み込み
	 *  
	 * \param pDevice	デバイス
	 * \param pPool		ディスクリプタプール
	 * \param filename	ファイル名
	 * \return true		初期化に成功
	 * \return false	初期化に失敗
	 *********************************************************************/
	bool Init(
		ID3D12Device* pDevice,
		DescriptorPool* pPool,
		const wchar_t* filename);

	/*****************************************************************//**
	 * \brief 初期化処理 
	 *  
	 * \param pDevice	デバイス
	 * \param pPool		ディスクリプタプール
	 * \param desc		リソースの構成
	 * \param isCube	キューブマップかどうか
	 * \return true		初期化に成功
	 * \return false	初期化に失敗
	 *********************************************************************/
	bool Init(
		ID3D12Device* pDevice,
		DescriptorPool* pPool,
		const D3D12_RESOURCE_DESC* pDesc,
		bool isCube);

	/*****************************************************************//**
	 * \brief 初期化処理 テクスチャリソースから
	 *  
	 * \param pResource リソース
	 * \return true		初期化に成功
	 * \return false	初期化に失敗
	 *********************************************************************/
	bool Init(ID3D12Resource* pResource);

	/*****************************************************************//**
	 * \brief 終了処理
	 *********************************************************************/
	void Term();
	
	/*****************************************************************//**
	 * \brief CPUディスクリプタハンドルを取得
	 *  
	 * \return CPUディスクリプタハンドル 
	 *********************************************************************/
	D3D12_CPU_DESCRIPTOR_HANDLE GetHandleCPU()const;

	/*****************************************************************//**
	 * \brief GPUディスクリプタハンドルを取得
	 *  
	 * \return GPUディスクリプタハンドル
	 *********************************************************************/
	D3D12_GPU_DESCRIPTOR_HANDLE GetHandleGPU()const;

	//!} 
private:
	//-----------------------------------------------------------------------------
	// private variables.
	//-----------------------------------------------------------------------------
	//!{
	
	ComPtr<ID3D12Resource>	m_pTex;		// テクスチャリソース
	DescriptorHandle*		m_pHandle;	// ディスクリプタハンドル
	DescriptorPool*			m_pPool;	// ディスクリプタプール
	

	//!} 
	//-----------------------------------------------------------------------------
	// private methods,
	//-----------------------------------------------------------------------------
	//!{
	
	Texture			(const Texture&) = delete;	// アクセス禁止
	void operator = (const Texture&) = delete;	// アクセス禁止

	/*****************************************************************//**
	 * \brief シェーダーリソース(テクスチャ)の設定を取得
	 *  
	 * \param isCube キューブマップかどうか
	 * \return シェーダーリソース(テクスチャ)の設定
	 *********************************************************************/
	D3D12_SHADER_RESOURCE_VIEW_DESC GetViewDesc(bool isCube);

	//!} 
};