/*****************************************************************//**
 * \file   DepthTarget.h
 * \brief  深度ターゲットクラス
 * 
 * \author Hiroto Kuge
 * \date   October 2022
 *********************************************************************/
#pragma once

 //-----------------------------------------------------------------------------
 // Includes.
 //-----------------------------------------------------------------------------
#include <d3d12.h>
#include <cstdint>
#include "ComPtr.h"

//-----------------------------------------------------------------------------
// Forward Declarations.
//-----------------------------------------------------------------------------
class DescriptorHandle;
class DescriptorPool;

/*****************************************************************//**
 * DepthTarget Class.
 *********************************************************************/
class DepthTarget{
	//-----------------------------------------------------------------------------
	// list of friend classes and methods.
	//-----------------------------------------------------------------------------
	//!{
			/* Nothing */
	//!} 
public:
	//-----------------------------------------------------------------------------
	//	public variables.
	//-----------------------------------------------------------------------------
	//!{
			/* Nothing */
	//!} 
	//-----------------------------------------------------------------------------
	//	public methods.
	//-----------------------------------------------------------------------------
	//!{
		
	/*****************************************************************//**
	 * \brief コンストラクタ
	 *********************************************************************/
	DepthTarget();
	
	/*****************************************************************//**
	 * \brief デストラクタ
	 *********************************************************************/
	~DepthTarget();
		
	/*****************************************************************//**
	 * \brief 初期化処理
	 * \param pDevice	
	 * \param pPoolDSV
	 * \param width
	 * \param height
	 * \param format
	 * \return 
	 *********************************************************************/
	bool Init(
		ID3D12Device* pDevice,
		DescriptorPool* pPoolDSV,
		uint32_t        width,
		uint32_t        height,
		DXGI_FORMAT     format);

	/*****************************************************************//**
	 * \brief 終了処理
	 *********************************************************************/
	void Term();

	/*****************************************************************//**
	 * \brief	ディスクリプタハンドル(DSV用)を返却
	 * \return	ディスクリプタハンドル(DSV用)
	 *********************************************************************/
	DescriptorHandle* GetHandleDSV()const;

	/*****************************************************************//**
	 * \brief	リソースを取得
	 * \return	リソース
	 *********************************************************************/
	ID3D12Resource* GetResource()const;

	/*****************************************************************//**
	 * \brief	リソース設定を取得
	 * \return	リソース
	 *********************************************************************/
	D3D12_RESOURCE_DESC GetDesc() const;

	/*****************************************************************//**
	 * \brief	深度ステンシルビューの設定を取得
	 * \return	深度ステンシルビューの設定
	 *********************************************************************/
	D3D12_DEPTH_STENCIL_VIEW_DESC GetViewDesc() const;

	//!} 
private:
	//-----------------------------------------------------------------------------
	// private vatiables.
	//-----------------------------------------------------------------------------
	//!{
	
	ComPtr<ID3D12Resource>          m_pTarget;		//　リソース
	DescriptorHandle*				m_pHandleDSV;	//　ディスクリプタハンドル(DSV用)
	DescriptorPool*					m_pPoolDSV;		//	ディスクリプタプール(DSV用)
	D3D12_DEPTH_STENCIL_VIEW_DESC   m_ViewDesc;		//	深度ステンシルビューの設定

	//!} 
	//-----------------------------------------------------------------------------
	// private methods.
	//-----------------------------------------------------------------------------	
	//!{
	
	DepthTarget(const DepthTarget&) = delete;
	void operator = (const DepthTarget&) = delete;

	//!} 
};

